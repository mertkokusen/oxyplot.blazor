@page "/"
@implements IDisposable
@using OxyPlot
@using OxyPlot.Axes
@using OxyPlot.Series
@using OxyPlot.Blazor

<h3>Blazored Oxy Plot Test</h3>
<BlazorPlotView Width="100%" Height="300px" Model="_model1" />
@*<BlazorPlotView Width="100%" Height="300px" Model="_model2" />*@

@code {
    System.Timers.Timer _update = new System.Timers.Timer(1000);
    PlotModel _model1;
    PlotModel _model2;
    DataPoint[] _data;
    LineSeries _line2;

    public static PlotModel BarSeries()
    {

        var model = new PlotModel { Title = "Cake Type Popularity" };
        //generate a random percentage distribution between the 5
        //cake-types (see axis below)
        var rand = new Random();
        double[] cakePopularity = new double[5];
        for (int i = 0; i < 5; ++i)
        {
            cakePopularity[i] = rand.NextDouble();
        }
        var sum = cakePopularity.Sum();

        var barSeries = new BarSeries
        {
            ItemsSource = new List<BarItem>(new[]
            {
                new BarItem{ Value = (cakePopularity[0] / sum * 100) },
                new BarItem{ Value = (cakePopularity[1] / sum * 100) },
                new BarItem{ Value = (cakePopularity[2] / sum * 100) },
                new BarItem{ Value = (cakePopularity[3] / sum * 100) },
                new BarItem{ Value = (cakePopularity[4] / sum * 100) }
            }),
            LabelPlacement = LabelPlacement.Inside,
            LabelFormatString = "{0:.00}%"
        };
        model.Series.Add(barSeries);

        model.Axes.Add(new CategoryAxis
        {
            Position = AxisPosition.Left,
            Key = "CakeAxis",
            ItemsSource = new[] {
            "Apple cake",
            "Baumkuchen",
            "Bundt Cake",
            "Chocolate cake",
            "Carrot cake"
            }
        });

        return model;
    }

    PlotModel BuildModel()
    {
        var model = new PlotModel { Title = "OxyPlot on Azure!" };
        var yAxis = new LinearAxis { Position = AxisPosition.Left, };   // , Minimum = -0.5, Maximum = 5.5,
        model.Axes.Add(yAxis);
        model.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom });
        model.Series.Add(new FunctionSeries(Math.Sin, 0, 10, 1000));
        _line2 = new LineSeries();
        _line2.Title = "Linie 2";
        _line2.Color = OxyColors.Red;
        _data = Enumerable.Range(0, 100).Select(i => new DataPoint(i, 2)).ToArray();
        _line2.ItemsSource = _data;
        model.Series.Add(_line2);
        return model;
    }

    void UpdateData(object sender, EventArgs e) => InvokeAsync(() =>
    {
        if (_update.Enabled)
        {
            var random = new Random();
            var idx = random.Next(_data.Length);
            _data[idx] = new DataPoint(idx, random.NextDouble() * 5);
            _model2.InvalidatePlot(true);
        }
    });

    protected override void OnInitialized()
    {
        _model2 = BuildModel();
        _model1 = BarSeries();
        _update.Elapsed += UpdateData;
        _update.Start();
    }

    void IDisposable.Dispose()
    {
        _update.Elapsed -= UpdateData;
        _update.Dispose();
    }
}
